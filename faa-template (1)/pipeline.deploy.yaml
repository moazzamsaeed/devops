parameters:
- name: moduleName
  displayName: "Module Name to deploy"
  type: string
  default: ""
- name: workingDirectory
  displayName: "Working DIrectory"
  type: string
  default: ""
- name: deployArtifactName
  displayName: "Build artifact Name "
  type: string
  default: ""
- name: dependsOn
  displayName: "Define job Dependency"
  type: string
  default: ""
- name: condition
  displayName: "Condition to run a job"
  type: string
  default: ""
- name: backendServiceArm
  displayName: "Service connection for backend service"
  type: string
  default: ""
- name: poolName
  displayName: "Name of the agent pool to run the job"
  type: string
  default: "Default"
- name: terraformVersion
  displayName: "Terraform version to use for the deployment."
  type: string
  default: "0.14.8"
- name: vmImage
  displayName: "VmImage to use. Only applicable in case of microsoft hosted agent pool"
  type: string
  default: "vs2017-win2016"
- name: moduleRepo
  displayName: "Name of Module repo"
  type: string
  default: ""
- name: backendAzureRmResourceGroupName
  displayName: "Resource Group for Backend storage account"
  type: string
  default: ""
- name: backendAzureRmStorageAccountName
  displayName: "Backend storage account"
  type: string
  default: ""
- name: backendAzureRmContainerName
  displayName: "Container name to store terraform state file"
  type: string
  default: ""
- name: backendAzureRmKey
  displayName: "State File Name"
  type: string
  default: ""
- name: keyvault
  displayName: "Name of keyvault to pull the secrets and client id to be used for making connection to Azure for backend storage"
  type: string
  default: ""
- name: sourceRepo
  displayName: "Source repository hosting terraform code"
  type: string
  default: ""
- name: env
  displayName: "Environment up for deployment"
  type: string
  default: ""
- name: currentRepo
  displayName: "Repository to use to trigger the deployment."
  type: string
  default: ""
- name: projectName
  displayName: "Azure DevOps project Name."
  type: string
  default: ""
- name: localFileName
  displayName: "Local file name with extension(most likely .tf)."
  type: string
  default: "locals.tf"
- name: pipelineName
  displayName: "Pipeline name in the deployment."
  type: string
  default: ""
- name: branchName
  displayName: "branch to pull the source code."
  type: string
  default: "master"
- name: repos
  displayName: "repos to download"
  type: object
- name: copyRepos
  displayName: "repos to copy local files to"
  type: object

jobs:
  - deployment: 
    displayName: 'Deploy Module ${{ parameters.moduleName }}'
    ${{ if eq(parameters.poolName, '') }}:
      pool: 
        vmImage: ${{ parameters.vmImage }}
    ${{ if ne(parameters.poolName, '') }}:
      pool: ${{ parameters.poolName }}
    dependsOn: '${{ parameters.dependsOn }}'
    condition: '${{ parameters.condition }}'
    environment: Development
    workspace:
      clean: all
    strategy:
      runOnce:
        deploy:
          steps:  
          - ${{ each repo in parameters.repos }}:
              - checkout: ${{ repo }}
                path: ${{ repo }} 
                
          - task: AzureKeyVault@1
            inputs:
              azureSubscription: '${{ parameters.backendServiceArm }}'
              KeyVaultName: '${{ parameters.keyvault }}'
              SecretsFilter: 'tenantid,subscriptionid,clientsecret,clientid,sqlserver'
              runAsPreJob: true
            displayName: 'Get key vault secrets as pipeline variables'

          - ${{ each copyRepo in parameters.copyRepos }}:
              - task: CopyFiles@2
                inputs:
                  SourceFolder: '$(Agent.BuildDirectory)/faa-tf-common-files'
                  Contents: '${{ parameters.localFileName }}'
                  TargetFolder: '$(Agent.BuildDirectory)/${{ copyRepo }}/' 
    
          #- task: TerraformInstaller@0
          #  inputs:
          #    terraformVersion: '${{ parameters.terraformVersion }}'
          #  displayName: 'Terraform > install'

          - script: |
              terraform -chdir="${{ parameters.workingDirectory }}" init \
                -plugin-dir="../faa-tf-common-files/plugins" \
                -reconfigure \
                -backend-config="storage_account_name=${{ parameters.backendAzureRmStorageAccountName }}" \
                -backend-config="container_name=${{ parameters.backendAzureRmContainerName }}" \
                -backend-config="key=${{ parameters.backendAzureRmKey }}" \
                -backend-config="resource_group_name=${{ parameters.backendAzureRmResourceGroupName }}" \
                -backend-config="subscription_id=$(subscriptionid)" \
                -backend-config="tenant_id=$(tenantid)" \
                -backend-config="client_id=$(clientid)" \
                -backend-config="client_secret=$(clientsecret)"
            displayName: Terraform Init

          - script: |
              az login --service-principal -u $(clientid) -p $(clientsecret) --tenant $(tenantid)
              export ARM_CLIENT_ID=$(clientid)
              export ARM_CLIENT_SECRET=$(clientsecret)
              export ARM_TENANT_ID=$(tenantid)
              export AZURE_CLIENT_ID=$(clientid)
              export AZURE_CLIENT_SECRET=$(clientsecret)
              export AZURE_TENANT_ID=$(tenantid)
              export ARM_SUBSCRIPTION_ID=$(subscriptionid)
              if [[ -z "${{ parameters.pipelineName }}" ]]
                then 
                  if [[ -z "${{ parameters.moduleName }}" ]]
                    then
                      terraform -chdir="${{ parameters.workingDirectory }}" plan -var-file="$(Agent.BuildDirectory)/${{ parameters.currentRepo }}/variables-${{ parameters.env }}.tfvars" -out $(Build.BuildId).plan
                    else
                      terraform -chdir="${{ parameters.workingDirectory }}" plan -var-file="$(Agent.BuildDirectory)/${{ parameters.currentRepo }}/${{ parameters.moduleName }}/variables-${{ parameters.env }}.tfvars" -out $(Build.BuildId).plan
                  fi
                else
                  if [[ -z "${{ parameters.moduleName }}" ]]
                    then
                      terraform -chdir="${{ parameters.workingDirectory }}" plan -var-file="$(Agent.BuildDirectory)/${{ parameters.currentRepo }}/${{ parameters.pipelineName }}/variables-${{ parameters.env }}.tfvars" -out $(Build.BuildId).plan
                    else
                      terraform -chdir="${{ parameters.workingDirectory }}" plan -var-file="$(Agent.BuildDirectory)/${{ parameters.currentRepo }}/${{ parameters.pipelineName }}/${{ parameters.moduleName }}/variables-${{ parameters.env }}.tfvars" -out $(Build.BuildId).plan
                  fi
              fi
            displayName: Terraform Plan

          - script: |
              az login --service-principal -u $(clientid) -p $(clientsecret) --tenant $(tenantid)
              export ARM_CLIENT_ID=$(clientid)
              export ARM_CLIENT_SECRET=$(clientsecret)
              export ARM_TENANT_ID=$(tenantid)
              export AZURE_CLIENT_ID=$(clientid)
              export AZURE_CLIENT_SECRET=$(clientsecret)
              export AZURE_TENANT_ID=$(tenantid)
              export ARM_SUBSCRIPTION_ID=$(subscriptionid)
              terraform -chdir="${{ parameters.workingDirectory }}" apply -auto-approve $(Build.BuildId).plan
            displayName: Terraform Apply
          
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                rm ./$moduleRepo/.terraform/terraform.tfstate
              workingDirectory: '$(Agent.BuildDirectory)'
            env:
              moduleRepo: ${{ parameters.moduleRepo }}

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(System.DefaultWorkingDirectory)'
              ArtifactName: '${{ parameters.deployArtifactName }}'
              publishLocation: 'Container'
            displayName: 'Publish Plan Artifact'